package cajero;

import java.text.DecimalFormat;
import java.util.InputMismatchException;
import java.util.Scanner;

/**
 * La clase Account representa una cuenta bancaria en el simulador de cajero
 * automático (ATM). Proporciona métodos para gestionar el número de cliente, el
 * número PIN y los saldos de cuenta.
 */
public class Account {

    private int customerNumber; // Número de cliente
    private int pinNumber; // Número PIN
    private double checkingBalance = 0; // Saldo de la cuenta corriente
    private double savingBalance = 0; // Saldo de la cuenta de ahorros

    Scanner input = new Scanner(System.in);
    DecimalFormat moneyFormat = new DecimalFormat("'$'###,##0.00");

    /**
     * Constructor por defecto.
     */
    public Account() {
    }

    /**
     * Constructor que inicializa el número de cliente y el número PIN.
     *
     * @param customerNumber Número de cliente
     * @param pinNumber Número PIN
     */
    public Account(int customerNumber, int pinNumber) {
        this.customerNumber = customerNumber;
        this.pinNumber = pinNumber;
    }

    /**
     * Constructor que inicializa todos los atributos de la cuenta.
     *
     * @param customerNumber Número de cliente
     * @param pinNumber Número PIN
     * @param checkingBalance Saldo de la cuenta corriente
     * @param savingBalance Saldo de la cuenta de ahorros
     */
    public Account(int customerNumber, int pinNumber, double checkingBalance, double savingBalance) {
        this.customerNumber = customerNumber;
        this.pinNumber = pinNumber;
        this.checkingBalance = checkingBalance;
        this.savingBalance = savingBalance;
    }

    /**
     * Establece el número de cliente.
     *
     * @param customerNumber Número de cliente
     * @return El número de cliente establecido
     */
    public int setCustomerNumber(int customerNumber) {
        this.customerNumber = customerNumber;
        return customerNumber;
    }

    /**
     * Obtiene el número de cliente.
     *
     * @return El número de cliente
     */
    public int getCustomerNumber() {
        return customerNumber;
    }

    /**
     * Establece el número PIN.
     *
     * @param pinNumber Número PIN
     * @return El número PIN establecido
     */
    public int setPinNumber(int pinNumber) {
        this.pinNumber = pinNumber;
        return pinNumber;
    }

    /**
     * Obtiene el número PIN.
     *
     * @return El número PIN
     */
    public int getPinNumber() {
        return pinNumber;
    }

    /**
     * Obtiene el saldo de la cuenta corriente.
     *
     * @return El saldo de la cuenta corriente
     */
    public double getCheckingBalance() {
        return checkingBalance;
    }

    /**
     * Obtiene el saldo de la cuenta de ahorros.
     *
     * @return El saldo de la cuenta de ahorros
     */
    public double getSavingBalance() {
        return savingBalance;
    }

    /**
     * Calcula el nuevo saldo de la cuenta corriente después de una retirada.
     *
     * @param amount Cantidad a retirar
     * @return El nuevo saldo de la cuenta corriente
     */
    public double calcCheckingWithdraw(double amount) {
        checkingBalance = (checkingBalance - amount);
        return checkingBalance;
    }

    /**
     * Calcula el nuevo saldo de la cuenta de ahorros después de una retirada.
     *
     * @param amount Cantidad a retirar
     * @return El nuevo saldo de la cuenta de ahorros
     */
    public double calcSavingWithdraw(double amount) {
        savingBalance = (savingBalance - amount);
        return savingBalance;
    }

    /**
     * Calcula el nuevo saldo de la cuenta corriente después de un depósito.
     *
     * @param amount Cantidad a depositar
     * @return El nuevo saldo de la cuenta corriente
     */
    public double calcCheckingDeposit(double amount) {
        checkingBalance = (checkingBalance + amount);
        return checkingBalance;
    }

    /**
     * Calcula el nuevo saldo de la cuenta de ahorros después de un depósito.
     *
     * @param amount Cantidad a depositar
     * @return El nuevo saldo de la cuenta de ahorros
     */
    public double calcSavingDeposit(double amount) {
        savingBalance = (savingBalance + amount);
        return savingBalance;
    }

    /**
     * Realiza una transferencia desde la cuenta corriente a la cuenta de
     * ahorros.
     *
     * @param amount Cantidad a transferir
     */
    public void calcCheckTransfer(double amount) {
        checkingBalance = checkingBalance - amount;
        savingBalance = savingBalance + amount;
    }

    /**
     * Realiza una transferencia desde la cuenta de ahorros a la cuenta
     * corriente.
     *
     * @param amount Cantidad a transferir
     */
    public void calcSavingTransfer(double amount) {
        savingBalance = savingBalance - amount;
        checkingBalance = checkingBalance + amount;
    }

    /**
     * Obtiene la cantidad de retiro deseada por el usuario desde la cuenta
     * corriente.
     */
    public void getCheckingWithdrawInput() {
        boolean end = false;
        while (!end) {
            try {
                System.out.println("\nSaldo actual de la cuenta corriente: " + moneyFormat.format(checkingBalance));
                System.out.print("\nCantidad que deseas retirar de la cuenta corriente: ");
                double amount = input.nextDouble();
                if ((checkingBalance - amount) >= 0 && amount >= 0) {
                    calcCheckingWithdraw(amount);
                    System.out.println("\nSaldo actual de la cuenta corriente: " + moneyFormat.format(checkingBalance));
                    end = true;
                } else {
                    System.out.println("\nEl saldo no puede ser negativo.");
                }
            } catch (InputMismatchException e) {
                System.out.println("\nOpción inválida.");
                input.next();
            }
        }
    }

    /**
     * Obtiene la cantidad de retiro deseada por el usuario desde la cuenta de
     * ahorros.
     */
    public void getsavingWithdrawInput() {
        boolean end = false;
        while (!end) {
            try {
                System.out.println("\nSaldo actual de la cuenta de ahorros: " + moneyFormat.format(savingBalance));
                System.out.print("\nCantidad que deseas retirar de la cuenta de ahorros: ");
                double amount = input.nextDouble();
                if ((savingBalance - amount) >= 0 && amount >= 0) {
                    calcSavingWithdraw(amount);
                    System.out.println("\nSaldo actual de la cuenta de ahorros: " + moneyFormat.format(savingBalance));
                    end = true;
                } else {
                    System.out.println("\nEl saldo no puede ser negativo.");
                }
            } catch (InputMismatchException e) {
                System.out.println("\nOpción inválida.");
                input.next();
            }
        }
    }

    /**
     * Obtiene la cantidad de depósito deseada por el usuario en la cuenta
     * corriente.
     */
    public void getCheckingDepositInput() {
        boolean end = false;
        while (!end) {
            try {
                System.out.println("\nSaldo actual de la cuenta corriente: " + moneyFormat.format(checkingBalance));
                System.out.print("\nCantidad que deseas depositar en la cuenta corriente: ");
                double amount = input.nextDouble();
                if ((checkingBalance + amount) >= 0 && amount >= 0) {
                    calcCheckingDeposit(amount);
                    System.out.println("\nSaldo actual de la cuenta corriente: " + moneyFormat.format(checkingBalance));
                    end = true;
                } else {
                    System.out.println("\nEl saldo no puede ser negativo.");
                }
            } catch (InputMismatchException e) {
                System.out.println("\nOpción inválida.");
                input.next();
            }
        }
    }

    /**
     * Obtiene la cantidad de depósito deseada por el usuario en la cuenta de
     * ahorros.
     */
    public void getSavingDepositInput() {
        boolean end = false;
        while (!end) {
            try {
                System.out.println("\nSaldo actual de la cuenta de ahorros: " + moneyFormat.format(savingBalance));
                System.out.print("\nCantidad que deseas depositar en la cuenta de ahorros: ");
                double amount = input.nextDouble();
                if ((savingBalance + amount) >= 0 && amount >= 0) {
                    calcSavingDeposit(amount);
                    System.out.println("\nSaldo actual de la cuenta de ahorros: " + moneyFormat.format(savingBalance));
                    end = true;
                } else {
                    System.out.println("\nEl saldo no puede ser negativo.");
                }
            } catch (InputMismatchException e) {
                System.out.println("\nOpción inválida.");
                input.next();
            }
        }
    }

    /**
     * Permite al usuario ingresar la información para realizar una
     * transferencia entre cuentas.
     *
     * @param accType Tipo de cuenta (Checkings o Savings)
     */
    public void getTransferInput(String accType) {
        boolean end = false;
        while (!end) {
            try {
                if (accType.equals("Checkings")) {
                    System.out.println("\nSelecciona una cuenta a la que deseas transferir fondos:");
                    System.out.println("1. Cuenta de Ahorros");
                    System.out.println("2. Salir");
                    System.out.print("\nOpción: ");
                    int choice = input.nextInt();
                    switch (choice) {
                        case 1:
                            System.out.println("\nSaldo actual de la cuenta corriente: " + moneyFormat.format(checkingBalance));
                            System.out.print("\nCantidad que deseas depositar en tu cuenta de ahorros: ");
                            double amount = input.nextDouble();
                            if ((savingBalance + amount) >= 0 && (checkingBalance - amount) >= 0 && amount >= 0) {
                                calcCheckTransfer(amount);
                                System.out.println("\nSaldo actual de la cuenta de ahorros: " + moneyFormat.format(savingBalance));
                                System.out.println("\nSaldo actual de la cuenta corriente: " + moneyFormat.format(checkingBalance));
                                end = true;
                            } else {
                                System.out.println("\nEl saldo no puede ser negativo.");
                            }
                            break;
                        case 2:
                            return;
                        default:
                            System.out.println("\nOpción inválida.");
                            break;
                    }
                } else if (accType.equals("Savings")) {
                    System.out.println("\nSelecciona una cuenta a la que deseas transferir fondos: ");
                    // Continuar con las opciones para la cuenta de ahorros
                    // ...
                }
            } catch (InputMismatchException e) {
                System.out.println("\nOpción inválida.");
                input.next();
            }
        }
    }

}
